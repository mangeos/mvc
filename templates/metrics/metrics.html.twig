{% extends "base.html.twig" %}
{% block title %}
{{title}}

{% endblock %}

{% block Rtitle %}
{{title}}

{% endblock %}


{% block content %}

		<article>
				<h1>{{ title }}</h1>
			
			<div class="container">	
                <div style="display: flex; flex-direction: column">
                    <h2>Introduktion</h2>
                     <p><strong>Coverage: </strong>Testtäckning definieras som ett mått i Software Testing som mäter mängden tester som utförs av en uppsättning test. Det kommer att omfatta insamling av information om vilka delar av ett program som körs när testsviten körs för att avgöra vilka grenar av villkorliga uttalanden som har tagits. Enkelt uttryckt är det en teknik för att säkerställa att dina tester testar din kod eller hur mycket av din kod du tränade genom att köra testet.</p>
                        <p><strong>Complexity: </strong>Cyklomatisk komplexitet är ett programvarumått som används för att indikera komplexiteten hos ett program. Det är ett kvantitativt mått på antalet linjärt oberoende vägar genom ett programs källkod. </p>
                        <p><strong>Cohesion: </strong>är ett mått på styrkan i förhållandet mellan metoder och data för en klass och något förenande syfte eller koncept som tjänas av den klassen. 
                        I en annan mening är det ett mått på styrkan i förhållandet mellan klassens metoder och data i sig. Cohesion är en ordinal typ av mätning och brukar beskrivas som "hög Cohesion" eller "låg Cohesion". Moduler med hög sammanhållning tenderar att vara att föredra, eftersom hög sammanhållning är förknippad med flera önskvärda egenskaper hos programvara, inklusive robusthet, tillförlitlighet, återanvändbarhet och förståelighet. Däremot är låg sammanhållning förknippad med oönskade egenskaper som att vara svåra att underhålla, testa, återanvända eller till och med förstå.</p>
                        <p><strong>Coupling: </strong>Afferenta kopplingar (Ca): Antalet klasser i andra paket som beror på klasser i paketet är en indikator på paketets ansvar. Afferenta kopplingar signalerar inåt. 
                                     Efferenta kopplingar (Ce): Antalet klasser i andra paket som klasserna i ett paket är beroende av är en indikator på paketets beroende av externa effekter. 
                                     Efferenta kopplingar signalerar utåt. </p>
                    <h2>Phpmetrics</h2>
                        <p><strong>Coverage: </strong>Det är endast 8% coverage så utvecklings potential finns helt klart. Dom tester jag har gjort var på klasserna App\Deck\Deck, App\Card\Card, App\Player\Player och där har jag 100% coverage.
                        För att få bättre mätvärden på coverage så behöver jag göra fler tester på mina andra klasser.
                        </p>
                        <p><strong>Complexity: </strong>Jag har inga höga Complexity världen men om jag tar App\Controller\CardController som exempel så ger scrutinizer värdet 13. 
                        Då min kod inte är så komplex så tycker jag inte det är några problem för tillfället.</p>
                        <p><strong>Cohesion: </strong>Jag får ett average LCOM på 0.92 vilket jag antar är lågt vilket visar styrkan i förhållandet mellan metoder och data för klasserna.</p>
                        <p><strong>Coupling: </strong>App\Deck\Deck	är den klass som ger högst på Afferent coupling med ett värde på 4. Medans klassen App\Controller\CardController ger värdet 8 på Efferent coupling. Jag tolkar det som låga siffror och ser inga konstigheter.</p>
                        <p><strong>Maintainability: </strong>Maintainability är ett mjukvarumått som mäter hur underhållbar ens kod är. Här finns utvecklings potential i flera av mina klasser, ett exempel kan vara i klassen Game där värdet ligger på 44.31. Ett sett att öka värdet skulle vara att lägga till kommentarer i min kod.  </p>
                    <h2>Scrutinizer</h2>
                     <p><strong>CRAP: </strong> Står för change risk anti pattern vilket betyder att den ger ett mätesvärde som jämför antalet tester med metodens komplexitet - högre är sämre.
                        I klassen GameController har jag methoden game21 där visar scrutinizer ett högt värde 30. </p>
                        <p><strong>Coverage: </strong>Det är endast 8% coverage så utvecklings potential finns helt klart. Dom tester jag har gjort var på klasserna App\Deck\Deck, App\Card\Card, App\Player\Player och där har jag 100% coverage.
                        För att få bättre mätvärden på coverage så behöver jag göra fler tester på mina andra klasser.
                        </p>
                        <p><strong>Complexity: </strong>Jag har inga höga Complexity världen men om jag tar App\Controller\CardController som exempel så ger scrutinizer värdet 13. 
                        Då min kod inte är så komplex så tycker jag inte det är några problem för tillfället.</p>
                        <p><strong>Cohesion: </strong>Jag får ett average LCOM på 0.92 vilket jag antar är lågt vilket visar styrkan i förhållandet mellan metoder och data för klasserna.</p>
                        <p><strong>Coupling: </strong>App\Deck\Deck	är den klass som ger högst på Afferent coupling med ett värde på 4. Medans klassen App\Controller\CardController ger värdet 8 på Efferent coupling. Jag tolkar det som låga siffror och ser inga konstigheter.</p>
                        <p><strong>Maintainability: </strong>Maintainability är ett mjukvarumått som mäter hur underhållbar ens kod är. 
                        Här finns utvecklings potential i flera av mina klasser, ett exempel kan vara i klassen Game där värdet ligger på 44.31. Ett sett att öka värdet skulle vara att lägga till kommentarer i min kod. </p></p>
                        <div style="font-size:13px">
                            <img src="https://scrutinizer-ci.com/g/mangeos/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality"/>
                            <img src="https://scrutinizer-ci.com/g/mangeos/mvc/badges/coverage.png?b=main" alt="Code Coverage"/>
                            <img src="https://scrutinizer-ci.com/g/mangeos/mvc/badges/build.png?b=main" alt="Build Status"/>
                            <img src="https://scrutinizer-ci.com/g/mangeos/mvc/badges/code-intelligence.svg?b=main" alt="Code Intelligence Status"/>
                        </div>
                    <h2>Förbättringar</h2>
                        <p>1:Maintainability om jag i klassen Game kommenterar min kod bättre så borde värdet öka något som just nu står på 44.31. 
                        Resultat efter: Ja måste ha feltolkat vad Maintainability innebär då ingen värde förändring skeddes.  </p>
                        <p>2:Coverage står just nu på 8%, om jag gör fler tester så kommer mätvärdet coverage öka. 
                        Jag kommer att testa koden i klassen Game (som har ett värde på 0% just nu) vilket kommer att öka värdet på coverage.
                        Resultat efter: Coverage höjdes till 11%, ingen jättehöjning men klassen Game höjdes från 0% till %
                        </p>
                        <p>3: I BibliotekController så finns ett Issues då jag har functionen index(Request $request) och använder aldrig request.
                        Så jag tar bort requesten och förväntar mig ett bättre resultat.
Resultat efter: I scrutinizer står det nu överst "Good job, 1 issue was fixed".</p> 
                    <h2>Diskussion</h2>
                        <p>Allt detta är nytt för mig vilket kändes som en stor utmaning att genomföra alla uppgifter.
                            Frågeställnineg om man kan aktivt jobba på detta sättet svarar jag på ja antagligen men i mitt fall tog det väldigt lång tid.</p>
                            Fördelarna är att kodstilen blir bättre men nackdelarna är att det tar tid att genomföra allt.
                </div>
			</div>
		</article>
{% endblock %}

