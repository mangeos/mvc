1682618994
waR3U4bTeM%3Abfc6eb9c53b5b5ab1556cc437d18c8a9-64fbfb9dc63a3e4935cab8b7ce08e32c
s:5328:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY0ZmJmYjlkYzYzYTNlNDkzNWNhYjhiN2NlMDhlMzJjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTA6ImFzc2V0cy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo1OToidmVuZG9yL3N5bWZvbnkvZnJhbWV3b3JrLWJ1bmRsZS9SZXNvdXJjZXMvY29uZmlnL2Fzc2V0cy5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjI3NzU6Ijw/cGhwCgovKgogKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgU3ltZm9ueSBwYWNrYWdlLgogKgogKiAoYykgRmFiaWVuIFBvdGVuY2llciA8ZmFiaWVuQHN5bWZvbnkuY29tPgogKgogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQogKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4KICovCgpuYW1lc3BhY2UgU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yOwoKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XENvbnRleHRcUmVxdWVzdFN0YWNrQ29udGV4dDsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XFBhY2thZ2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxBc3NldFxQYWNrYWdlczsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XFBhdGhQYWNrYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQXNzZXRcVXJsUGFja2FnZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XFZlcnNpb25TdHJhdGVneVxFbXB0eVZlcnNpb25TdHJhdGVneTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XFZlcnNpb25TdHJhdGVneVxKc29uTWFuaWZlc3RWZXJzaW9uU3RyYXRlZ3k7CnVzZSBTeW1mb255XENvbXBvbmVudFxBc3NldFxWZXJzaW9uU3RyYXRlZ3lcU3RhdGljVmVyc2lvblN0cmF0ZWd5OwoKcmV0dXJuIHN0YXRpYyBmdW5jdGlvbiAoQ29udGFpbmVyQ29uZmlndXJhdG9yICRjb250YWluZXIpIHsKICAgICRjb250YWluZXItPnBhcmFtZXRlcnMoKQogICAgICAgIC0+c2V0KCdhc3NldC5yZXF1ZXN0X2NvbnRleHQuYmFzZV9wYXRoJywgbnVsbCkKICAgICAgICAtPnNldCgnYXNzZXQucmVxdWVzdF9jb250ZXh0LnNlY3VyZScsIG51bGwpCiAgICA7CgogICAgJGNvbnRhaW5lci0+c2VydmljZXMoKQogICAgICAgIC0+c2V0KCdhc3NldHMucGFja2FnZXMnLCBQYWNrYWdlczo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdhc3NldHMuX2RlZmF1bHRfcGFja2FnZScpLAogICAgICAgICAgICAgICAgdGFnZ2VkX2l0ZXJhdG9yKCdhc3NldHMucGFja2FnZScsICdwYWNrYWdlJyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+YWxpYXMoUGFja2FnZXM6OmNsYXNzLCAnYXNzZXRzLnBhY2thZ2VzJykKCiAgICAgICAgLT5zZXQoJ2Fzc2V0cy5lbXB0eV9wYWNrYWdlJywgUGFja2FnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdhc3NldHMuZW1wdHlfdmVyc2lvbl9zdHJhdGVneScpLAogICAgICAgICAgICBdKQoKICAgICAgICAtPmFsaWFzKCdhc3NldHMuX2RlZmF1bHRfcGFja2FnZScsICdhc3NldHMuZW1wdHlfcGFja2FnZScpCgogICAgICAgIC0+c2V0KCdhc3NldHMuY29udGV4dCcsIFJlcXVlc3RTdGFja0NvbnRleHQ6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgncmVxdWVzdF9zdGFjaycpLAogICAgICAgICAgICAgICAgcGFyYW0oJ2Fzc2V0LnJlcXVlc3RfY29udGV4dC5iYXNlX3BhdGgnKSwKICAgICAgICAgICAgICAgIHBhcmFtKCdhc3NldC5yZXF1ZXN0X2NvbnRleHQuc2VjdXJlJyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdhc3NldHMucGF0aF9wYWNrYWdlJywgUGF0aFBhY2thZ2U6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnYmFzZSBwYXRoJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3ZlcnNpb24gc3RyYXRlZ3knKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2Fzc2V0cy5jb250ZXh0JyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdhc3NldHMudXJsX3BhY2thZ2UnLCBVcmxQYWNrYWdlOjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ2Jhc2UgVVJMcycpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCd2ZXJzaW9uIHN0cmF0ZWd5JyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdhc3NldHMuY29udGV4dCcpLAogICAgICAgICAgICBdKQoKICAgICAgICAtPnNldCgnYXNzZXRzLnN0YXRpY192ZXJzaW9uX3N0cmF0ZWd5JywgU3RhdGljVmVyc2lvblN0cmF0ZWd5OjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3ZlcnNpb24nKSwKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnZm9ybWF0JyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdhc3NldHMuZW1wdHlfdmVyc2lvbl9zdHJhdGVneScsIEVtcHR5VmVyc2lvblN0cmF0ZWd5OjpjbGFzcykKCiAgICAgICAgLT5zZXQoJ2Fzc2V0cy5qc29uX21hbmlmZXN0X3ZlcnNpb25fc3RyYXRlZ3knLCBKc29uTWFuaWZlc3RWZXJzaW9uU3RyYXRlZ3k6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnbWFuaWZlc3QgcGF0aCcpLAogICAgICAgICAgICAgICAgc2VydmljZSgnaHR0cF9jbGllbnQnKS0+bnVsbE9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgIF0pCiAgICA7Cn07CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1ODoiXFN5bWZvbnlcQ29tcG9uZW50XERlcGVuZGVuY3lJbmplY3Rpb25cTG9hZGVyXENvbmZpZ3VyYXRvciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJDb25maWd1cmF0b3IiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";